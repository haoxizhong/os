// Code generated by protoc-gen-go.
// source: db.proto
// DO NOT EDIT!

/*
Package blockdb is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	GetBlockRequest
	GetRequest
	GetResponse
	GetHeightResponse
	BooleanResponse
	VerifyResponse
	Null
	Transaction
	JsonBlockString
	Block
*/
package blockdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VerifyResponse_Results int32

const (
	VerifyResponse_FAILED    VerifyResponse_Results = 0
	VerifyResponse_PENDING   VerifyResponse_Results = 1
	VerifyResponse_SUCCEEDED VerifyResponse_Results = 2
)

var VerifyResponse_Results_name = map[int32]string{
	0: "FAILED",
	1: "PENDING",
	2: "SUCCEEDED",
}
var VerifyResponse_Results_value = map[string]int32{
	"FAILED":    0,
	"PENDING":   1,
	"SUCCEEDED": 2,
}

func (x VerifyResponse_Results) String() string {
	return proto.EnumName(VerifyResponse_Results_name, int32(x))
}
func (VerifyResponse_Results) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type Transaction_Types int32

const (
	Transaction_UNKNOWN  Transaction_Types = 0
	Transaction_TRANSFER Transaction_Types = 5
)

var Transaction_Types_name = map[int32]string{
	0: "UNKNOWN",
	5: "TRANSFER",
}
var Transaction_Types_value = map[string]int32{
	"UNKNOWN":  0,
	"TRANSFER": 5,
}

func (x Transaction_Types) String() string {
	return proto.EnumName(Transaction_Types_name, int32(x))
}
func (Transaction_Types) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type GetBlockRequest struct {
	BlockHash string `protobuf:"bytes,1,opt,name=BlockHash" json:"BlockHash,omitempty"`
}

func (m *GetBlockRequest) Reset()                    { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()               {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetBlockRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type GetRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetResponse struct {
	Value int32 `protobuf:"varint,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetResponse) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GetHeightResponse struct {
	Height   int32  `protobuf:"varint,1,opt,name=Height" json:"Height,omitempty"`
	LeafHash string `protobuf:"bytes,2,opt,name=LeafHash" json:"LeafHash,omitempty"`
}

func (m *GetHeightResponse) Reset()                    { *m = GetHeightResponse{} }
func (m *GetHeightResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHeightResponse) ProtoMessage()               {}
func (*GetHeightResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetHeightResponse) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetHeightResponse) GetLeafHash() string {
	if m != nil {
		return m.LeafHash
	}
	return ""
}

type BooleanResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *BooleanResponse) Reset()                    { *m = BooleanResponse{} }
func (m *BooleanResponse) String() string            { return proto.CompactTextString(m) }
func (*BooleanResponse) ProtoMessage()               {}
func (*BooleanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BooleanResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VerifyResponse struct {
	Result    VerifyResponse_Results `protobuf:"varint,1,opt,name=Result,enum=blockdb.VerifyResponse_Results" json:"Result,omitempty"`
	BlockHash string                 `protobuf:"bytes,2,opt,name=BlockHash" json:"BlockHash,omitempty"`
}

func (m *VerifyResponse) Reset()                    { *m = VerifyResponse{} }
func (m *VerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyResponse) ProtoMessage()               {}
func (*VerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerifyResponse) GetResult() VerifyResponse_Results {
	if m != nil {
		return m.Result
	}
	return VerifyResponse_FAILED
}

func (m *VerifyResponse) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Transaction struct {
	Type      Transaction_Types `protobuf:"varint,1,opt,name=Type,enum=blockdb.Transaction_Types" json:"Type,omitempty"`
	FromID    string            `protobuf:"bytes,3,opt,name=FromID" json:"FromID,omitempty"`
	ToID      string            `protobuf:"bytes,4,opt,name=ToID" json:"ToID,omitempty"`
	Value     int32             `protobuf:"varint,5,opt,name=Value" json:"Value,omitempty"`
	MiningFee int32             `protobuf:"varint,6,opt,name=MiningFee" json:"MiningFee,omitempty"`
	UUID      string            `protobuf:"bytes,7,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Transaction) GetType() Transaction_Types {
	if m != nil {
		return m.Type
	}
	return Transaction_UNKNOWN
}

func (m *Transaction) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *Transaction) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *Transaction) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Transaction) GetMiningFee() int32 {
	if m != nil {
		return m.MiningFee
	}
	return 0
}

func (m *Transaction) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type JsonBlockString struct {
	Json string `protobuf:"bytes,1,opt,name=Json" json:"Json,omitempty"`
}

func (m *JsonBlockString) Reset()                    { *m = JsonBlockString{} }
func (m *JsonBlockString) String() string            { return proto.CompactTextString(m) }
func (*JsonBlockString) ProtoMessage()               {}
func (*JsonBlockString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *JsonBlockString) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type Block struct {
	BlockID      int32          `protobuf:"varint,1,opt,name=BlockID" json:"BlockID,omitempty"`
	PrevHash     string         `protobuf:"bytes,2,opt,name=PrevHash" json:"PrevHash,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=Transactions" json:"Transactions,omitempty"`
	MinerID      string         `protobuf:"bytes,4,opt,name=MinerID" json:"MinerID,omitempty"`
	Nonce        string         `protobuf:"bytes,5,opt,name=Nonce" json:"Nonce,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Block) GetBlockID() int32 {
	if m != nil {
		return m.BlockID
	}
	return 0
}

func (m *Block) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetMinerID() string {
	if m != nil {
		return m.MinerID
	}
	return ""
}

func (m *Block) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func init() {
	proto.RegisterType((*GetBlockRequest)(nil), "blockdb.GetBlockRequest")
	proto.RegisterType((*GetRequest)(nil), "blockdb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "blockdb.GetResponse")
	proto.RegisterType((*GetHeightResponse)(nil), "blockdb.GetHeightResponse")
	proto.RegisterType((*BooleanResponse)(nil), "blockdb.BooleanResponse")
	proto.RegisterType((*VerifyResponse)(nil), "blockdb.VerifyResponse")
	proto.RegisterType((*Null)(nil), "blockdb.Null")
	proto.RegisterType((*Transaction)(nil), "blockdb.Transaction")
	proto.RegisterType((*JsonBlockString)(nil), "blockdb.JsonBlockString")
	proto.RegisterType((*Block)(nil), "blockdb.Block")
	proto.RegisterEnum("blockdb.VerifyResponse_Results", VerifyResponse_Results_name, VerifyResponse_Results_value)
	proto.RegisterEnum("blockdb.Transaction_Types", Transaction_Types_name, Transaction_Types_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlockChainMiner service

type BlockChainMinerClient interface {
	// Return UserID's Balance on the Chain, after considering the latest valid block. Pending transactions have no effect on Get()
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Receive and Broadcast Transaction: balance[FromID]-=Value, balance[ToID]+=(Value-MiningFee), balance[MinerID]+=MiningFee
	// Return Success=false if FromID is same as ToID or latest balance of FromID is insufficient
	Transfer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Check if a transaction has been written into a block, or is still waiting, or is invalid on the longest branch.
	Verify(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*VerifyResponse, error)
	// Get the current blockchain length; use the longest branch if multiple branch exist.
	GetHeight(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetHeightResponse, error)
	// Get the Json representation of the block with BlockHash hash value
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*JsonBlockString, error)
	// Send a block to another server
	PushBlock(ctx context.Context, in *JsonBlockString, opts ...grpc.CallOption) (*Null, error)
	// Send a transaction to another server
	PushTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Null, error)
}

type blockChainMinerClient struct {
	cc *grpc.ClientConn
}

func NewBlockChainMinerClient(cc *grpc.ClientConn) BlockChainMinerClient {
	return &blockChainMinerClient{cc}
}

func (c *blockChainMinerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) Transfer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/Transfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) Verify(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) GetHeight(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetHeightResponse, error) {
	out := new(GetHeightResponse)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/GetHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*JsonBlockString, error) {
	out := new(JsonBlockString)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) PushBlock(ctx context.Context, in *JsonBlockString, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/PushBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) PushTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/blockdb.BlockChainMiner/PushTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockChainMiner service

type BlockChainMinerServer interface {
	// Return UserID's Balance on the Chain, after considering the latest valid block. Pending transactions have no effect on Get()
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Receive and Broadcast Transaction: balance[FromID]-=Value, balance[ToID]+=(Value-MiningFee), balance[MinerID]+=MiningFee
	// Return Success=false if FromID is same as ToID or latest balance of FromID is insufficient
	Transfer(context.Context, *Transaction) (*BooleanResponse, error)
	// Check if a transaction has been written into a block, or is still waiting, or is invalid on the longest branch.
	Verify(context.Context, *Transaction) (*VerifyResponse, error)
	// Get the current blockchain length; use the longest branch if multiple branch exist.
	GetHeight(context.Context, *Null) (*GetHeightResponse, error)
	// Get the Json representation of the block with BlockHash hash value
	GetBlock(context.Context, *GetBlockRequest) (*JsonBlockString, error)
	// Send a block to another server
	PushBlock(context.Context, *JsonBlockString) (*Null, error)
	// Send a transaction to another server
	PushTransaction(context.Context, *Transaction) (*Null, error)
}

func RegisterBlockChainMinerServer(s *grpc.Server, srv BlockChainMinerServer) {
	s.RegisterService(&_BlockChainMiner_serviceDesc, srv)
}

func _BlockChainMiner_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).Transfer(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).Verify(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).GetHeight(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_PushBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonBlockString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).PushBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/PushBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).PushBlock(ctx, req.(*JsonBlockString))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_PushTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).PushTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/PushTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).PushTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChainMiner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockdb.BlockChainMiner",
	HandlerType: (*BlockChainMinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BlockChainMiner_Get_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _BlockChainMiner_Transfer_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _BlockChainMiner_Verify_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _BlockChainMiner_GetHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockChainMiner_GetBlock_Handler,
		},
		{
			MethodName: "PushBlock",
			Handler:    _BlockChainMiner_PushBlock_Handler,
		},
		{
			MethodName: "PushTransaction",
			Handler:    _BlockChainMiner_PushTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

func init() { proto.RegisterFile("db.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x93, 0xb6, 0x49, 0xd3, 0xd3, 0x6d, 0x2d, 0x66, 0x1a, 0x51, 0x34, 0x89, 0xc9, 0x80,
	0x34, 0x84, 0x14, 0x44, 0x91, 0x60, 0x48, 0x5c, 0xb0, 0x2e, 0x6d, 0xd7, 0xb1, 0x85, 0xca, 0x6d,
	0xc7, 0x75, 0xda, 0x79, 0x6b, 0x44, 0x17, 0x8f, 0x38, 0x45, 0xda, 0xab, 0xf0, 0x02, 0xdc, 0xf0,
	0x46, 0xbc, 0x0c, 0xb2, 0x9d, 0xa6, 0x49, 0xb4, 0xdd, 0xf9, 0x3f, 0xf9, 0x7c, 0xfc, 0xe7, 0x9c,
	0x63, 0x83, 0x75, 0x35, 0x73, 0xef, 0x62, 0x96, 0x30, 0x54, 0x9f, 0x2d, 0xd9, 0xfc, 0xc7, 0xd5,
	0x0c, 0xbf, 0x85, 0xd6, 0x80, 0x26, 0x5d, 0xa1, 0x08, 0xfd, 0xb9, 0xa2, 0x3c, 0x41, 0xfb, 0xd0,
	0x90, 0xfa, 0x34, 0xe0, 0x0b, 0x5b, 0x3f, 0xd0, 0x0f, 0x1b, 0x64, 0x13, 0xc0, 0x2f, 0x01, 0x06,
	0x34, 0x59, 0xb3, 0x7b, 0x60, 0x4e, 0x39, 0x8d, 0x87, 0x5e, 0x0a, 0xa6, 0x0a, 0xbf, 0x80, 0xa6,
	0xa4, 0xf8, 0x1d, 0x8b, 0x38, 0x45, 0xbb, 0x60, 0x5c, 0x06, 0xcb, 0x15, 0x95, 0x94, 0x41, 0x94,
	0xc0, 0x03, 0x78, 0x32, 0xa0, 0xc9, 0x29, 0x0d, 0x6f, 0x16, 0x1b, 0x74, 0x0f, 0x4c, 0x15, 0x49,
	0xd9, 0x54, 0x21, 0x07, 0xac, 0x73, 0x1a, 0x5c, 0x4b, 0x53, 0x15, 0x79, 0x56, 0xa6, 0xf1, 0x1b,
	0x68, 0x75, 0x19, 0x5b, 0xd2, 0x20, 0xca, 0xd2, 0xd8, 0x50, 0x1f, 0xaf, 0xe6, 0x73, 0xca, 0xb9,
	0xcc, 0x63, 0x91, 0xb5, 0xc4, 0xbf, 0x75, 0xd8, 0xb9, 0xa4, 0x71, 0x78, 0x7d, 0x9f, 0xc1, 0x1f,
	0xc1, 0x24, 0x94, 0xaf, 0x96, 0xea, 0xcc, 0x9d, 0xce, 0x73, 0x37, 0x2d, 0x8f, 0x5b, 0x04, 0x5d,
	0x45, 0x71, 0x92, 0xe2, 0xc5, 0x52, 0x55, 0xca, 0xa5, 0x7a, 0x07, 0xf5, 0x74, 0x03, 0x02, 0x30,
	0xfb, 0xc7, 0xc3, 0xf3, 0x9e, 0xd7, 0xd6, 0x50, 0x13, 0xea, 0xa3, 0x9e, 0xef, 0x0d, 0xfd, 0x41,
	0x5b, 0x47, 0xdb, 0xd0, 0x18, 0x4f, 0x4f, 0x4e, 0x7a, 0x3d, 0xaf, 0xe7, 0xb5, 0x2b, 0xd8, 0x84,
	0x9a, 0xbf, 0x5a, 0x2e, 0xf1, 0x3f, 0x1d, 0x9a, 0x93, 0x38, 0x88, 0x78, 0x30, 0x4f, 0x42, 0x16,
	0x21, 0x17, 0x6a, 0x93, 0xfb, 0x3b, 0x9a, 0xfa, 0x73, 0x32, 0x7f, 0x39, 0xc6, 0x15, 0x00, 0x27,
	0x92, 0x13, 0x55, 0xec, 0xc7, 0xec, 0x76, 0xe8, 0xd9, 0x55, 0xd5, 0x17, 0xa5, 0x10, 0x82, 0xda,
	0x84, 0x0d, 0x3d, 0xbb, 0x26, 0xa3, 0x72, 0xbd, 0x69, 0x8e, 0x91, 0x6b, 0x8e, 0xf8, 0xb5, 0x8b,
	0x30, 0x0a, 0xa3, 0x9b, 0x3e, 0xa5, 0xb6, 0x29, 0xbf, 0x6c, 0x02, 0x22, 0xcf, 0x74, 0x3a, 0xf4,
	0xec, 0xba, 0xca, 0x23, 0xd6, 0x18, 0x83, 0x21, 0x2d, 0x88, 0x1f, 0x9c, 0xfa, 0x5f, 0xfd, 0x6f,
	0xdf, 0xfd, 0xb6, 0x86, 0xb6, 0xc0, 0x9a, 0x90, 0x63, 0x7f, 0xdc, 0xef, 0x91, 0xb6, 0x71, 0x56,
	0xb3, 0x2a, 0xed, 0x2a, 0x7e, 0x05, 0xad, 0x33, 0xce, 0x22, 0x59, 0xa9, 0x71, 0x12, 0x87, 0xd1,
	0x8d, 0x48, 0x28, 0x42, 0xe9, 0x18, 0xc9, 0x35, 0xfe, 0xa3, 0x83, 0x21, 0x19, 0xd1, 0x4d, 0xb9,
	0x48, 0xe7, 0xcc, 0x20, 0x6b, 0x29, 0xc6, 0x62, 0x14, 0xd3, 0x5f, 0xf9, 0xb1, 0x58, 0x6b, 0x74,
	0x04, 0x5b, 0xb9, 0xfa, 0x70, 0xbb, 0x7a, 0x50, 0x3d, 0x6c, 0x76, 0x76, 0x1f, 0x2a, 0x1e, 0x29,
	0x90, 0xe2, 0xbc, 0x8b, 0x30, 0x92, 0x73, 0xad, 0x2a, 0xb5, 0x96, 0xa2, 0x58, 0x3e, 0x8b, 0xe6,
	0xaa, 0x58, 0x0d, 0xa2, 0x44, 0xe7, 0x6f, 0x15, 0x5a, 0xd2, 0xd1, 0xc9, 0x22, 0x08, 0x23, 0xc9,
	0xa2, 0x0e, 0x54, 0x07, 0x34, 0x41, 0x4f, 0xb3, 0xe3, 0x36, 0xd7, 0xc6, 0xd9, 0x2d, 0x06, 0xd5,
	0x74, 0x61, 0x0d, 0x7d, 0x06, 0x4b, 0xfa, 0xb8, 0xa6, 0x31, 0x7a, 0xd0, 0xa7, 0x63, 0x67, 0xd1,
	0xd2, 0xc4, 0x63, 0x0d, 0x7d, 0x02, 0x53, 0xcd, 0xeb, 0x23, 0x7b, 0x9f, 0x3d, 0x32, 0xd6, 0x58,
	0x43, 0x47, 0xd0, 0xc8, 0xae, 0x22, 0xda, 0xce, 0x38, 0x31, 0x8b, 0x8e, 0x93, 0x37, 0x5b, 0xbc,
	0xad, 0x58, 0x43, 0x5f, 0xc0, 0x5a, 0x3f, 0x20, 0xc8, 0xce, 0x93, 0xf9, 0x37, 0x25, 0x67, 0xbb,
	0xd4, 0x78, 0xac, 0xa1, 0x0f, 0xd0, 0x18, 0xad, 0xf8, 0xa2, 0x9c, 0xa2, 0x04, 0x3a, 0x45, 0x57,
	0xd2, 0x73, 0x4b, 0xec, 0xcb, 0x5f, 0x93, 0x87, 0xff, 0xbb, 0xbc, 0xb3, 0xfb, 0x1a, 0xf6, 0xc3,
	0x30, 0xe4, 0x2e, 0xbf, 0xe7, 0x09, 0xbd, 0xe5, 0x2e, 0xe3, 0x8a, 0x98, 0x8b, 0xee, 0x5d, 0xcd,
	0xba, 0x75, 0xaf, 0x3b, 0x12, 0xcf, 0xe4, 0x48, 0x9f, 0x99, 0xf2, 0xbd, 0x7c, 0xff, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0xda, 0x80, 0xc3, 0xd1, 0x3b, 0x05, 0x00, 0x00,
}
